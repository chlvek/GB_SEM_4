import logging
import random
from enum import Enum, auto

from utils import get_token, WithContext
from bot_app import BotApp

from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    MessageHandler,
    Filters,
)


class BotState(Enum):
    picking_game = auto()
    starting_game = auto()
    playing = auto()
    unknown = auto()


BOT_STATE = BotState.unknown



class GameMenu(WithContext):

    def __init__(self, game):
        self.game = game
        self.callbacks = {
            'üìö–ü—Ä–∞–≤–∏–ª–∞': self.rules,
            'üéÆ–ò–≥—Ä–∞—Ç—å!': self.play,
            '‚óÄÔ∏è–ù–∞–∑–∞–¥': self.back,
        }
        self.buttons = [[KeyboardButton(name) for name in self.callbacks]]

    def get_callback(self, callback_id):
        return self.callbacks.get(callback_id, self.default)

    def rules(self):
        rules = self.game.rules
        self.send_message(rules)
        game_start(self.update, self.context)

    def play(self):
        if self.game.in_dev:
            self.send_message('–≠—Ç–∞ –∏–≥—Ä–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, –∏ —Å–∫–æ—Ä–æ –≤ –Ω–µ—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å! –ê –ø–æ–∫–∞ –¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ?')
            game_start(self.update, self.context)  # tmp
        else:
            game_play(self.update, self.context)

    def back(self):
        game_pick(self.update, self.context)

    def default(self, update: Update, context: CallbackContext):
        self.send_message('–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫')
        game_start(update, context)


class Game(WithContext):

    in_dev = True
    name = None
    rules = None

    def __init__(self):
        self.menu = GameMenu(self)
        self.is_over = False
        self.player_turn = False
        self.player_win = False

    def send_status(self):
        status = self._get_status()
        turn_info = self._get_turn_info()
        self.send_messages(status, turn_info)

    def play_turn(self):
        if self.player_turn:
            self._play_player_turn()
            self._check_game_over()
            if self.is_over:
                return
            if not self.player_turn:
                self._play_bot_turn()
        else:
            self._play_bot_turn()

        self.send_status()
        self._check_game_over()

    def game_over(self):
        winner_text = f"{'–Ø' if not self.player_win else '–¢—ã'} –≤—ã–∏–≥—Ä–∞–ª!"
        self.send_messages('GAME OVER!!!', winner_text)

    def prepare(self):
        raise NotImplementedError()

    def _play_player_turn(self):
        raise NotImplementedError()

    def _play_bot_turn(self):
        raise NotImplementedError()

    def _check_game_over(self):
        raise NotImplementedError()

    def _get_status(self):
        raise NotImplementedError()

    def _get_turn_info(self):
        return '–¢—ã —Ö–æ–¥–∏—à—å!' if self.player_turn else '–Ø —Ö–æ–∂—É!'


class CandiesGame(Game):

    in_dev = False
    name = '–ö–æ–Ω—Ñ–µ—Ç–∫–∏ üç¨'
    rules = '\n'.join((
        '–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç 100 –∫–æ–Ω—Ñ–µ—Ç.',
        '–ú—ã –¥–µ–ª–∞–µ–º —Ö–æ–¥—ã –¥—Ä—É–≥ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∞.',
        '–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–æ–π.',
        '–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 28 –∫–æ–Ω—Ñ–µ—Ç,',
        '–ø—Ä–∏ —ç—Ç–æ–º —Ö–æ–¥—è—â–∏–π –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞',
        '–¢–æ—Ç, –∫—Ç–æ –±–µ—Ä–µ—Ç –ø–æ–ª—É—á–∏–ª –≤—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã - –≤—ã–∏–≥—Ä–∞–ª.',
    ))

    def __init__(self):
        super().__init__()
        self.number_of_candies = None
        self.player_candies = None
        self.bot_candies = None

    def prepare(self):
        self.is_over = False
        self.player_turn = random.randint(1,100) < 50

        self.number_of_candies = 100
        self.player_candies = 0
        self.bot_candies = 0

    def check_input(self, player_input):
        try:
            player_input = int(player_input)
            return 1 <= player_input <= min(28, self.number_of_candies)
        except Exception:
            return False

    def _play_player_turn(self):
        player_input = self.message

        if not self.check_input(player_input):
            self.send_message(f'–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {min(28, self.number_of_candies)}!')
            return
        
        player_input = int(player_input)

        self.player_candies = self.bot_candies + player_input
        self.bot_candies = 0
        self.number_of_candies -= player_input
        self.player_turn = False

        self.send_message(f'–¢—ã –≤–∑—è–ª {player_input} –∫–æ–Ω—Ñ–µ—Ç')

    def _play_bot_turn(self):
        k = random.randint(1, 28 if self.number_of_candies >= 28 else self.number_of_candies)

        self.bot_candies = self.player_candies + k
        self.player_candies = 0
        self.number_of_candies -= k
        self.player_turn = True

        self.send_message(f'–Ø –≤–∑—è–ª {k} –∫–æ–Ω—Ñ–µ—Ç')

    def _check_game_over(self):
        if self.number_of_candies == 0:
            self.is_over = True
            self.player_win = self.player_candies > 0

    def _get_status(self):
        return '\n'.join((
            f'–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–µ—Ç: {self.number_of_candies}',
            f'–£ –º–µ–Ω—è –∫–æ–Ω—Ñ–µ—Ç: {self.bot_candies}',
            f'–£ —Ç–µ–±—è –∫–æ–Ω—Ñ–µ—Ç: {self.player_candies}',
        ))


class MacGame(Game):

    in_dev = True
    name = '–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã üêÑüêÇ'
    rules = '\n'.join((
        '–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª–æ–≤–æ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤.',
        '–î–æ–ø—É—Å—Ç–∏–º, —á–µ—Ç—ã—Ä–µ—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–∑—ã–≤–∞—è',
        '—Å–ª–æ–≤–∞ –∏–∑ —Ç–æ–≥–æ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤.',
        '–ï—Å–ª–∏ –±—É–∫–≤–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞ –µ—Å—Ç—å –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º - —ç—Ç–æ –∫–æ—Ä–æ–≤–∞üêÑ.',
        '–ï—Å–ª–∏ –µ—â–µ –∏ –ø–æ–∑–∏—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç - —ç—Ç–æ –±—ã–∫üêÇ.',
        '–ü—Ä–∏–º–µ—Ä:',
        '–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: —á–∞—Ç—ã.',
        '–¢—ã: —Ç—å–º–∞ - 2 üêÑüêÑ',
        '–¢—ã: —á—É–º–∞ - 1 üêÇ, 1 üêÑ.',
    ))


class GamesManager:
    def __init__(self, *games: Game):
        self.games = {game.name: game for game in games}
        self.active_game = None

    def set_active(self, game_id: str):
        self.active_game = self.get(game_id)

    def get(self, game_id: str):
        return self.games.get(game_id)

    def __iter__(self):
        return iter(self.games.values())


GAMES = GamesManager(CandiesGame(), MacGame())


def start(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã. –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º?',
    )
    game_pick(update, context)


def game_pick(update: Update, context: CallbackContext):
    global BOT_STATE
    buttons = [[KeyboardButton(game.name) for game in GAMES]]
    context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text='–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É',
        reply_markup=ReplyKeyboardMarkup(buttons),
    )
    BOT_STATE = BotState.picking_game


def game_pick_handle(update: Update, context: CallbackContext):
    global GAMES
    game_id = update.message.text
    game = GAMES.get(game_id)
    if not game:
        context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text=f'–û–π, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∏–≥—Ä—ã: {game_id}'
        )
        game_pick(update, context)
    GAMES.set_active(game_id)
    game_start(update, context)


def game_start(update: Update, context: CallbackContext):
    global BOT_STATE, GAMES
    buttons = GAMES.active_game.menu.buttons
    context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–ù–∞—á–Ω—ë–º?",
        reply_markup=ReplyKeyboardMarkup(buttons),
    )
    BOT_STATE = BotState.starting_game


def game_start_handle(update: Update, context: CallbackContext):
    global GAMES, BOT_STATE
    callback = GAMES.active_game.menu.set_context(update, context).get_callback(update.message.text)
    callback()


def game_play(update: Update, context: CallbackContext):
    global GAMES, BOT_STATE
    BOT_STATE = BotState.playing
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text='–ò–≥—Ä–∞–µ–º! (–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)',
        reply_markup=None,
    )
    game = GAMES.active_game
    game.set_context(update, context)
    game.prepare()
    game.play_turn()


def game_play_handle(update: Update, context: CallbackContext):
    game = GAMES.active_game
    game.set_context(update, context)
    game.play_turn()
    if game.is_over:
        game.game_over()
        game_pick(update, context)


STATE_TRANSITIONS = {
    BotState.picking_game: game_pick_handle,
    BotState.starting_game: game_start_handle,
    BotState.playing: game_play_handle,
}


def handle_message(update: Update, context: CallbackContext):
    try:
        handler = STATE_TRANSITIONS.get(BOT_STATE)
        handler(update, context)
    except Exception as e:
        context.bot.send_message(
            chat_id=update.effective_chat.id, 
            text=f'–ß—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start. –û—à–∏–±–∫–∞: {e}',
        )


def main():
    logging.basicConfig(format='%(asctime)s [%(levelname)s]: %(message)s', level=logging.INFO)
    token = get_token()
    app = BotApp(token)
    app.dispatcher.add_handler(CommandHandler('start', start))
    app.dispatcher.add_handler(MessageHandler(Filters.all, handle_message))
    app.run()


if __name__ == '__main__':
    main()